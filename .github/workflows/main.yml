name: CI
on:
  push:
    branches:
      - ali
      - osama
jobs:
  Lint:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    - name: call python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Lint Python code
      run: |
            pip install flake8
            flake8 .
    - name: Install Hadolint
      run: |
          wget -qO- https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64 -O /usr/local/bin/hadolint
          chmod +x /usr/local/bin/hadolint
    - name: Lint Dockerfile
      run: hadolint Dockerfile
  Build:
    needs: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    # - name: Setup Docker
    #   uses: docker/setup-buildx-action@v2
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: build docker image
      run: 
          docker compose build
    - name: Tag and Push Docker Images
      run: | 
        docker tag hivebox ghcr.io/rezo7895/hivebox:$(date +%s)
        docker push ghcr.io/rezo7895/hivebox:$(date +%s)
  Test_endpoint:
    needs: Build
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    - name: Setup Docker
      uses: docker/setup-buildx-action@v2
    - name: build and run dockerfile
      run: |

        docker compose build 
    - name: Run container
      run:
        docker compose up -d
    - name: Test /version Endpoint
      run: |
        VERSION=$(grep -oP 'VERSION = "\K[^\"]+' app.py)  
        value="{\"version\":\"$VERSION\"}"
        echo "sleep 10 Seconds waiting for flask to start"
        sleep 10
        response=$(curl -s http://localhost:5000/version)
        if [ "$response" != "$value" ]; then
        echo "Unexpected response: $response. Expected: $value."
        exit 1
        fi
        echo "Endpoint returned the correct response: $value"
  Tests:
    needs: Test_endpoint
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    - name: call python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
          pip install -r requirements.txt
    - name: run tests
      run: pytest
  # Security_fixes:
  #   needs: unit_test
  #   runs-on: ubuntu-22.04
  #   steps:          
  #   - name: Checkout the code
  #     uses: actions/checkout@v3       
  #   - name: OSSF Scorecard action        
  #     uses: ossf/scorecard-action@v2.4.0
  #     with:
  #       results_file: results_format.json

      