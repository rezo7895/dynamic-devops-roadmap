name: CI
on:
  push:
    branches:
      - ali
      - osama
jobs:
  Linting_Test:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    - name: call python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Lint Python code
      run: |
            pip install flake8
            flake8 .
    - name: Install Hadolint
      run: |
          wget -qO- https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64 -O /usr/local/bin/hadolint
          chmod +x /usr/local/bin/hadolint
    - name: Lint Dockerfile
      run: hadolint Dockerfile
  # SonarQube_Analysis:
  #   needs: Linting_Test
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout the code
  #     uses: actions/checkout@v3
  #   - name: Set up JDK
  #     uses: actions/setup-java@v2
  #     with:
  #       java-version: '17'
  #       distribution: 'adopt-openj9'  
  #   - name: Analyze with SonarQube
  #       # You can pin the exact commit or the version.
  #     uses: SonarSource/sonarqube-scan-action@v4
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #     with:
  #       args:
  #         -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
  #         #-Dsonar.branch.name=ali
  #   - name: Wait for Quality Gate result
  #     id: quality-gate
  #     run: |
  #           response=$(curl -s -u $SONAR_TOKEN: $SONAR_HOST_URL/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }})
  #           echo "Quality Gate Response: $response"
  #           status=$(echo $response | jq -r .projectStatus.status)
  #           echo "::set-output name=status::$status"
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  terrascan_job:
    needs: Linting_Test
    runs-on: ubuntu-latest
    name: terrascan-action
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Run Terrascan
      id: terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'k8s'
        policy_type: 'k8s'
        only_warn: true
        scm_token: ${{ secrets.GITHUB_TOKEN }} 
        verbose: true
        sarif_upload: true
        iac_dir: './k8s-manifests'
    
  Python_Tests:
    needs: terrascan_job
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    - name: call python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
          pip install -r requirements.txt
    - name: run tests
      run: pytest
  Build:
    needs: Python_Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: build docker image
      run: 
          docker compose build
    - name: Tag and Push Docker Images
      run: |
        IMAGE_TAG=$(date +%s)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        docker tag hivebox ghcr.io/rezo7895/hivebox:$IMAGE_TAG
        docker push ghcr.io/rezo7895/hivebox:$IMAGE_TAG
  Deploy:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Set up kubectl
        run: |
          curl -LO https://dl.k8s.io/release/v1.26.0/bin/linux/amd64/kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      - name: Set up Kubeconfig for kind
        run: |
            mkdir -p $HOME/.kube
            echo "${{ secrets.KUBECONFIG_SECRET }}" > $HOME/.kube/config
      - name: Update Kubernetes deployment with new image
        run: |
            kubectl set image deployment/app-deployment python=ghcr.io/rezo7895/hivebox:$IMAGE_TAG
            kubectl rollout status deployment/app-deployment
      
      - name: Verify deployment
        run: |
            kubectl get pods





