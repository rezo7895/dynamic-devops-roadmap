name: CI
on:
  push:
    branches:
      - ali
      - osama
jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    - name: call python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Lint Python code
      run: |
            pip install flake8
            flake8 .
    - name: Install Hadolint
      run: |
          wget -qO- https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64 -O /usr/local/bin/hadolint
          chmod +x /usr/local/bin/hadolint
    - name: Lint Dockerfile
      run: hadolint Dockerfile
  build:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    - name: Setup Docker
      uses: docker/setup-buildx-action@v2
    - name: build and run dockerfile
      run: docker build -t app .
  test_endpoint:
    needs: build
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    - name: Setup Docker
      uses: docker/setup-buildx-action@v2
    - name: build and run dockerfile
      run: 
        docker build -t app .
    - name: Run container
      run:
        docker run -d -p 5000:5000 app
    - name: Test /version Endpoint
      run: |
        value='{"version":"v0.0.2"}'
        echo "sleep 10 Seconds waiting for flask to start"
        sleep 10
        response=$(curl -s http://localhost:5000/version)
        if [ "$response" != "$value" ]; then
        echo "Unexpected response: $response. Expected: $value."
        exit 1
        fi
        echo "Endpoint returned the correct response: $value"
  unit_test:
    needs: test_endpoint
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    - name: call python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
          pip install -r requirements.txt
    - name: run unit tests
      run: python app_test.py
  # Security_fixes:
  #   needs: unit_test
  #   runs-on: ubuntu-22.04
  #   steps:          
  #   - name: Checkout the code
  #     uses: actions/checkout@v3       
  #   - name: OSSF Scorecard action        
  #     uses: ossf/scorecard-action@v2.4.0
  #     with:
  #       results_file: results_format.json

      